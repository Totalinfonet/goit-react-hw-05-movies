{"version":3,"file":"static/js/884.8d9409ff.chunk.js","mappings":"iOA+CA,UA3CqB,WAAO,IAAD,IACjBA,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAkCE,EAAAA,EAAAA,UAAS,MAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACMC,GAAWC,EAAAA,EAAAA,MACXC,GAAeC,EAAAA,EAAAA,QAAM,oBAACH,EAASI,aAAV,aAAC,EAAgBC,YAAjB,QAAyB,KAepD,OAbAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAc,mCAAG,6GAEAC,EAAAA,EAAAA,aAAwBb,GAFxB,OAEbc,EAFa,OAGnBV,EAAaU,GAHM,gDAKnBC,QAAQC,MAAR,MALmB,yDAAH,qDASpBJ,GACD,GAAE,CAACZ,KAGF,4BACE,SAAC,KAAD,CAAMiB,GAAIV,EAAaW,QAAvB,4CACCf,GACC,4BACE,wBAAKA,EAAUgB,SACf,uBAAIhB,EAAUiB,YACd,0CAAkBjB,EAAUkB,iBAC5B,wCAAgBlB,EAAUmB,eAC1B,4BACE,SAAC,KAAD,CAAML,GAAG,OAAT,0GACA,SAAC,KAAD,CAAMA,GAAG,UAAT,sDAEF,SAAC,EAAAM,SAAD,CAAUC,UAAU,6CAApB,UACE,SAAC,KAAD,UAIJ,wCAIP,C,8DC3CKC,EAAU,mCAEVC,EAAmB,kDAEnBC,EAAqB,sCAErBC,EAAwB,4CAEfC,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,6GAE2BC,EAAAA,EAAAA,IAAUJ,EAAkB,CACjDK,OAAQ,CACNC,QAASP,KAJjB,cAEUQ,EAFV,yBAOWA,EAASnB,KAAKoB,SAPzB,sCASInB,QAAQC,MAAR,MACM,IAAImB,MAAM,iCAVpB,gFAceC,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA4BpC,GAA5B,gGAE2B8B,EAAAA,EAAAA,IAAA,UAAaH,EAAb,YAAmC3B,GAAW,CACnE+B,OAAQ,CACNC,QAASP,KAJjB,cAEUQ,EAFV,yBAOWA,EAASnB,MAPpB,sCASIC,QAAQC,MAAR,MACM,IAAImB,MAAM,4BAVpB,gFAceE,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA4BC,GAA5B,gGAE2BR,EAAAA,EAAAA,IAAUF,EAAuB,CACtDG,OAAQ,CACNC,QAASP,EACTc,MAAOD,KALf,cAEUL,EAFV,yBAQWA,EAASnB,KAAKoB,SARzB,sCAUInB,QAAQC,MAAR,MACM,IAAImB,MAAM,0BAXpB,gFAeeK,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA4BxC,GAA5B,gGAE2B8B,EAAAA,EAAAA,IAAA,UAClBH,GADkB,OACG3B,EADH,YAErB,CACE+B,OAAQ,CACNC,QAASP,KANnB,cAEUQ,EAFV,yBAUWA,EAASnB,KAAK2B,MAVzB,sCAYI1B,QAAQC,MAAR,MACM,IAAImB,MAAM,+BAbpB,gFAiBeO,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA+B1C,GAA/B,gGAE2B8B,EAAAA,EAAAA,IAAA,UAClBH,GADkB,OACG3B,EADH,YAErB,CACE+B,OAAQ,CACNC,QAASP,KANnB,cAEUQ,EAFV,yBAUWA,EAASnB,KAAKoB,SAVzB,sCAYInB,QAAQC,MAAR,MACM,IAAImB,MAAM,+BAbpB,gFAiBA,IAAMtB,EAAa,CACjBgB,kBAhFF,WAEeA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,EA+EbO,aA/EF,SAc4B,GAAbA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,EAkEbC,aAlEF,SAc4B,GAAbA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,EAqDbG,aArDF,SAe4B,GAAbA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,EAuCbE,gBAvCF,SAiB+B,GAAhBA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,GAyBf,K","sources":["pages/MovieDetails.jsx","service/apiService.js"],"sourcesContent":["import { useParams, Link, useLocation, Outlet } from 'react-router-dom';\nimport { useEffect, useState, useRef, Suspense } from 'react';\nimport apiService from '../service/apiService';\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  const [movieInfo, setMovieInfo] = useState(null);\n  const location = useLocation();\n  const backLinkHref = useRef(location.state?.from ?? '/');\n\n  useEffect(() => {\n    const fetchMovieInfo = async () => {\n      try {\n        const data = await apiService.getMovieInfo(movieId);\n        setMovieInfo(data);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    fetchMovieInfo();\n  }, [movieId]);\n\n  return (\n    <div>\n      <Link to={backLinkHref.current}>Назад</Link>\n      {movieInfo ? (\n        <div>\n          <h1>{movieInfo.title}</h1>\n          <p>{movieInfo.overview}</p>\n          <p>Release date: {movieInfo.release_date}</p>\n          <p>Popularity: {movieInfo.popularity}</p>\n          <nav>\n            <Link to=\"cast\">Акторський склад</Link>\n            <Link to=\"reviews\">Огляди</Link>\n          </nav>\n          <Suspense fallback={<div>Loading page...</div>}>\n            <Outlet />\n          </Suspense>\n        </div>\n      ) : (\n        <p>Loading...</p>\n      )}\n    </div>\n  );\n};\n\nexport default MovieDetails;\n","import axios from 'axios';\n\nconst API_KEY = '68685731643ea27d6deb89fd83fc916a';\n\nconst TRENDING_API_URL = 'https://api.themoviedb.org/3/trending/movie/day';\n\nconst MOVIE_INFO_API_URL = 'https://api.themoviedb.org/3/movie/';\n\nconst SEARCH_MOVIES_API_URL = 'https://api.themoviedb.org/3/search/movie';\n\nasync function getTrendingMovies() {\n  try {\n    const response = await axios.get(TRENDING_API_URL, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return response.data.results;\n  } catch (error) {\n    console.error(error);\n    throw new Error('Error getting trending movies');\n  }\n}\n\nasync function getMovieInfo(movieId) {\n  try {\n    const response = await axios.get(`${MOVIE_INFO_API_URL}/${movieId}`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return response.data;\n  } catch (error) {\n    console.error(error);\n    throw new Error('Error getting movie info');\n  }\n}\n\nasync function searchMovies(keyword) {\n  try {\n    const response = await axios.get(SEARCH_MOVIES_API_URL, {\n      params: {\n        api_key: API_KEY,\n        query: keyword,\n      },\n    });\n    return response.data.results;\n  } catch (error) {\n    console.error(error);\n    throw new Error('Error searching movies');\n  }\n}\n\nasync function getMovieCast(movieId) {\n  try {\n    const response = await axios.get(\n      `${MOVIE_INFO_API_URL}${movieId}/credits`,\n      {\n        params: {\n          api_key: API_KEY,\n        },\n      }\n    );\n    return response.data.cast;\n  } catch (error) {\n    console.error(error);\n    throw new Error('Error getting movie credits');\n  }\n}\n\nasync function getMovieReviews(movieId) {\n  try {\n    const response = await axios.get(\n      `${MOVIE_INFO_API_URL}${movieId}/reviews`,\n      {\n        params: {\n          api_key: API_KEY,\n        },\n      }\n    );\n    return response.data.results;\n  } catch (error) {\n    console.error(error);\n    throw new Error('Error getting movie reviews');\n  }\n}\n\nconst apiService = {\n  getTrendingMovies,\n  getMovieInfo,\n  searchMovies,\n  getMovieCast,\n  getMovieReviews,\n};\n\nexport default apiService;\n"],"names":["movieId","useParams","useState","movieInfo","setMovieInfo","location","useLocation","backLinkHref","useRef","state","from","useEffect","fetchMovieInfo","apiService","data","console","error","to","current","title","overview","release_date","popularity","Suspense","fallback","API_KEY","TRENDING_API_URL","MOVIE_INFO_API_URL","SEARCH_MOVIES_API_URL","getTrendingMovies","axios","params","api_key","response","results","Error","getMovieInfo","searchMovies","keyword","query","getMovieCast","cast","getMovieReviews"],"sourceRoot":""}