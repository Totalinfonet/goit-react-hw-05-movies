{"version":3,"file":"static/js/779.34339152.chunk.js","mappings":"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","sources":["components/Reviews/Reviews.styled.js","components/Reviews/Reviews.jsx","service/apiService.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nconst ReviewList = styled.ul`\n  list-style: none;\n  padding: 0;\n`;\n\nconst ReviewListItem = styled.li`\n  margin-bottom: 1rem;\n\n  p:first-of-type {\n    font-weight: bold;\n    margin-bottom: 0.5rem;\n  }\n`;\n\nexport { ReviewList, ReviewListItem };\n","import { useEffect, useState } from 'react';\nimport apiService from '../../service/apiService';\nimport { useParams } from 'react-router-dom';\nimport { ReviewList, ReviewListItem } from './Reviews.styled';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    const fetchMovieReviews = async () => {\n      try {\n        const movieReviews = await apiService.getMovieReviews(movieId);\n        setReviews(movieReviews);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    fetchMovieReviews();\n  }, [movieId]);\n\n  return (\n    <div>\n      <h2>Reviews</h2>\n      {reviews?.length ? (\n        <ReviewList>\n          {reviews.map(review => (\n            <ReviewListItem key={review.id}>\n              <p>{`Author: ${review.author}`}</p>\n              <p>{review.content}</p>\n            </ReviewListItem>\n          ))}\n        </ReviewList>\n      ) : (\n        <p>\n          Sorry, there are no reviews available for this movie at this time.\n        </p>\n      )}\n    </div>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\nconst API_KEY = '68685731643ea27d6deb89fd83fc916a';\n\nconst TRENDING_API_URL = 'https://api.themoviedb.org/3/trending/movie/day';\n\nconst MOVIE_INFO_API_URL = 'https://api.themoviedb.org/3/movie/';\n\nconst SEARCH_MOVIES_API_URL = 'https://api.themoviedb.org/3/search/movie';\n\nasync function getTrendingMovies() {\n  try {\n    const response = await axios.get(TRENDING_API_URL, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return response.data.results;\n  } catch (error) {\n    console.error(error);\n    throw new Error('Error getting trending movies');\n  }\n}\n\nasync function getMovieInfo(movieId) {\n  try {\n    const response = await axios.get(`${MOVIE_INFO_API_URL}/${movieId}`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return response.data;\n  } catch (error) {\n    console.error(error);\n    throw new Error('Error getting movie info');\n  }\n}\n\nasync function searchMovies(keyword) {\n  try {\n    const response = await axios.get(SEARCH_MOVIES_API_URL, {\n      params: {\n        api_key: API_KEY,\n        query: keyword,\n      },\n    });\n    return response.data.results;\n  } catch (error) {\n    console.error(error);\n    throw new Error('Error searching movies');\n  }\n}\n\nasync function getMovieCast(movieId) {\n  try {\n    const response = await axios.get(\n      `${MOVIE_INFO_API_URL}${movieId}/credits`,\n      {\n        params: {\n          api_key: API_KEY,\n        },\n      }\n    );\n    return response.data.cast;\n  } catch (error) {\n    console.error(error);\n    throw new Error('Error getting movie credits');\n  }\n}\n\nasync function getMovieReviews(movieId) {\n  try {\n    const response = await axios.get(\n      `${MOVIE_INFO_API_URL}${movieId}/reviews`,\n      {\n        params: {\n          api_key: API_KEY,\n        },\n      }\n    );\n    return response.data.results;\n  } catch (error) {\n    console.error(error);\n    throw new Error('Error getting movie reviews');\n  }\n}\n\nconst apiService = {\n  getTrendingMovies,\n  getMovieInfo,\n  searchMovies,\n  getMovieCast,\n  getMovieReviews,\n};\n\nexport default apiService;\n"],"names":["ReviewList","styled","ReviewListItem","movieId","useParams","useState","reviews","setReviews","useEffect","fetchMovieReviews","apiService","movieReviews","console","error","length","map","review","author","content","id","API_KEY","TRENDING_API_URL","MOVIE_INFO_API_URL","SEARCH_MOVIES_API_URL","getTrendingMovies","axios","params","api_key","response","data","results","Error","getMovieInfo","searchMovies","keyword","query","getMovieCast","cast","getMovieReviews"],"sourceRoot":""}