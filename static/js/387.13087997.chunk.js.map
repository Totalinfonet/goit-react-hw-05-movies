{"version":3,"file":"static/js/387.13087997.chunk.js","mappings":"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","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","service/apiService.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nconst CastWrapper = styled.div`\n  ul {\n    list-style-type: none;\n    margin: 0;\n    padding: 0;\n  }\n\n  li {\n    align-items: center;\n    display: flex;\n    margin-bottom: 1rem;\n  }\n`;\n\nconst ActorImage = styled.img`\n  border-radius: 50%;\n  margin-right: 1rem;\n`;\n\nconst ActorInfo = styled.div`\n  p:first-of-type {\n    font-weight: bold;\n  }\n`;\n\nexport { CastWrapper, ActorImage, ActorInfo };\n","import { useEffect, useState } from 'react';\nimport apiService from '../../service/apiService';\nimport { useParams } from 'react-router-dom';\nimport { CastWrapper, ActorImage, ActorInfo } from './Cast.styled';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n\n  useEffect(() => {\n    const fetchMovieCredits = async () => {\n      try {\n        const credits = await apiService.getMovieCast(movieId);\n        setCast(credits);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    fetchMovieCredits();\n  }, [movieId]);\n\n  const tmdbImageUrl = (path, size) => {\n    const baseUrl = 'https://image.tmdb.org/t/p/';\n    return `${baseUrl}${size}${path}`;\n  };\n\n  return (\n    <CastWrapper>\n      <h2>Cast</h2>\n      {cast?.length ? (\n        <ul>\n          {cast.map(actor => (\n            <li key={actor.id}>\n              <ActorImage\n                src={tmdbImageUrl(actor.profile_path, 'w200')}\n                alt={actor.name}\n              />\n              <ActorInfo>\n                <p>{actor.name}</p>\n                <p>{actor.character}</p>\n              </ActorInfo>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <p>Loading cast...</p>\n      )}\n    </CastWrapper>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nconst API_KEY = '68685731643ea27d6deb89fd83fc916a';\n\nconst TRENDING_API_URL = 'https://api.themoviedb.org/3/trending/movie/day';\n\nconst MOVIE_INFO_API_URL = 'https://api.themoviedb.org/3/movie/';\n\nconst SEARCH_MOVIES_API_URL = 'https://api.themoviedb.org/3/search/movie';\n\nasync function getTrendingMovies() {\n  try {\n    const response = await axios.get(TRENDING_API_URL, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return response.data.results;\n  } catch (error) {\n    console.error(error);\n    throw new Error('Error getting trending movies');\n  }\n}\n\nasync function getMovieInfo(movieId) {\n  try {\n    const response = await axios.get(`${MOVIE_INFO_API_URL}/${movieId}`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return response.data;\n  } catch (error) {\n    console.error(error);\n    throw new Error('Error getting movie info');\n  }\n}\n\nasync function searchMovies(keyword) {\n  try {\n    const response = await axios.get(SEARCH_MOVIES_API_URL, {\n      params: {\n        api_key: API_KEY,\n        query: keyword,\n      },\n    });\n    return response.data.results;\n  } catch (error) {\n    console.error(error);\n    throw new Error('Error searching movies');\n  }\n}\n\nasync function getMovieCast(movieId) {\n  try {\n    const response = await axios.get(\n      `${MOVIE_INFO_API_URL}${movieId}/credits`,\n      {\n        params: {\n          api_key: API_KEY,\n        },\n      }\n    );\n    return response.data.cast;\n  } catch (error) {\n    console.error(error);\n    throw new Error('Error getting movie credits');\n  }\n}\n\nasync function getMovieReviews(movieId) {\n  try {\n    const response = await axios.get(\n      `${MOVIE_INFO_API_URL}${movieId}/reviews`,\n      {\n        params: {\n          api_key: API_KEY,\n        },\n      }\n    );\n    return response.data.results;\n  } catch (error) {\n    console.error(error);\n    throw new Error('Error getting movie reviews');\n  }\n}\n\nconst apiService = {\n  getTrendingMovies,\n  getMovieInfo,\n  searchMovies,\n  getMovieCast,\n  getMovieReviews,\n};\n\nexport default apiService;\n"],"names":["CastWrapper","styled","ActorImage","ActorInfo","movieId","useParams","useState","cast","setCast","useEffect","fetchMovieCredits","apiService","credits","console","error","length","map","actor","src","path","profile_path","size","alt","name","character","id","API_KEY","TRENDING_API_URL","MOVIE_INFO_API_URL","SEARCH_MOVIES_API_URL","getTrendingMovies","axios","params","api_key","response","data","results","Error","getMovieInfo","searchMovies","keyword","query","getMovieCast","getMovieReviews"],"sourceRoot":""}