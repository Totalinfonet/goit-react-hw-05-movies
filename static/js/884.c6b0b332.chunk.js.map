{"version":3,"file":"static/js/884.c6b0b332.chunk.js","mappings":"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","sources":["pages/MovieDetails.jsx","service/apiService.js"],"sourcesContent":["import { useParams, Link, useLocation, Outlet } from 'react-router-dom';\nimport { useEffect, useState, useRef, Suspense } from 'react';\nimport apiService from '../service/apiService';\nimport styled from '@emotion/styled';\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  const [movieInfo, setMovieInfo] = useState(null);\n  const location = useLocation();\n  const backLinkHref = useRef(location.state?.from ?? '/');\n\n  useEffect(() => {\n    const fetchMovieInfo = async () => {\n      try {\n        const data = await apiService.getMovieInfo(movieId);\n        setMovieInfo(data);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    fetchMovieInfo();\n  }, [movieId]);\n\n  return (\n    <Container>\n      <BackLink to={backLinkHref.current}>Назад</BackLink>\n      {movieInfo ? (\n        <MovieInfoContainer>\n          <Poster\n            src={`https://image.tmdb.org/t/p/w500/${movieInfo.poster_path}`}\n            alt={movieInfo.title}\n          />\n          <MovieInfo>\n            <Title>{movieInfo.title}</Title>\n            <Overview>{movieInfo.overview}</Overview>\n            <ReleaseDate>Release date: {movieInfo.release_date}</ReleaseDate>\n            <Popularity>Popularity: {movieInfo.popularity}</Popularity>\n            <Genres>\n              Genres: {movieInfo.genres.map(genre => genre.name).join(', ')}\n            </Genres>\n          </MovieInfo>\n        </MovieInfoContainer>\n      ) : (\n        <p>Loading...</p>\n      )}\n      <Nav>\n        <NavLink to=\"cast\">Акторський склад</NavLink>\n        <NavLink to=\"reviews\">Огляди</NavLink>\n      </Nav>\n      <Suspense fallback={<div>Loading page...</div>}>\n        <Outlet />\n      </Suspense>\n    </Container>\n  );\n};\n\nexport default MovieDetails;\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n`;\n\nconst BackLink = styled(Link)`\n  display: inline-block;\n  padding: 0.5rem 1rem;\n  font-size: 1.2rem;\n  text-align: center;\n  text-decoration: none;\n  background-color: #333;\n  color: #fff;\n  border: none;\n  border-radius: 0.25rem;\n  cursor: pointer;\n  transition: background-color 0.2s ease-in-out;\n\n  &:hover {\n    background-color: #555;\n    color: orange;\n  }\n`;\n\nconst MovieInfoContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  gap: 1rem;\n  align-items: flex-start;\n  margin-top: 1rem;\n`;\n\nconst Poster = styled.img`\n  max-width: 33%;\n`;\n\nconst MovieInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n  align-items: center;\n  margin-top: 1rem;\n`;\n\nconst Title = styled.h1`\n  font-size: 2rem;\n  margin: 1rem 0;\n`;\n\nconst Overview = styled.p`\n  font-size: 1.2rem;\n  margin: 1rem 0;\n`;\n\nconst ReleaseDate = styled.p`\n  font-size: 1.2rem;\n`;\n\nconst Popularity = styled.p`\n  font-size: 1.2rem;\n`;\n\nconst Genres = styled.p`\n  font-size: 1.2rem;\n`;\n\nconst Nav = styled.nav`\n  margin-top: 1rem;\n  display: flex;\n  flex-direction: row;\n  gap: 1rem;\n`;\n\nconst NavLink = styled(Link)`\n  display: inline-block;\n  padding: 0.5rem 1rem;\n  font-size: 1.2rem;\n  text-align: center;\n  text-decoration: none;\n  background-color: #333;\n  color: #fff;\n  border: none;\n  border-radius: 0.25rem;\n  cursor: pointer;\n  transition: background-color 0.2s ease-in-out;\n\n  &:hover {\n    background-color: #555;\n    color: orange;\n  }\n`;\n","import axios from 'axios';\n\nconst API_KEY = '68685731643ea27d6deb89fd83fc916a';\n\nconst TRENDING_API_URL = 'https://api.themoviedb.org/3/trending/movie/day';\n\nconst MOVIE_INFO_API_URL = 'https://api.themoviedb.org/3/movie/';\n\nconst SEARCH_MOVIES_API_URL = 'https://api.themoviedb.org/3/search/movie';\n\nasync function getTrendingMovies() {\n  try {\n    const response = await axios.get(TRENDING_API_URL, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return response.data.results;\n  } catch (error) {\n    console.error(error);\n    throw new Error('Error getting trending movies');\n  }\n}\n\nasync function getMovieInfo(movieId) {\n  try {\n    const response = await axios.get(`${MOVIE_INFO_API_URL}/${movieId}`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return response.data;\n  } catch (error) {\n    console.error(error);\n    throw new Error('Error getting movie info');\n  }\n}\n\nasync function searchMovies(keyword) {\n  try {\n    const response = await axios.get(SEARCH_MOVIES_API_URL, {\n      params: {\n        api_key: API_KEY,\n        query: keyword,\n      },\n    });\n    return response.data.results;\n  } catch (error) {\n    console.error(error);\n    throw new Error('Error searching movies');\n  }\n}\n\nasync function getMovieCast(movieId) {\n  try {\n    const response = await axios.get(\n      `${MOVIE_INFO_API_URL}${movieId}/credits`,\n      {\n        params: {\n          api_key: API_KEY,\n        },\n      }\n    );\n    return response.data.cast;\n  } catch (error) {\n    console.error(error);\n    throw new Error('Error getting movie credits');\n  }\n}\n\nasync function getMovieReviews(movieId) {\n  try {\n    const response = await axios.get(\n      `${MOVIE_INFO_API_URL}${movieId}/reviews`,\n      {\n        params: {\n          api_key: API_KEY,\n        },\n      }\n    );\n    return response.data.results;\n  } catch (error) {\n    console.error(error);\n    throw new Error('Error getting movie reviews');\n  }\n}\n\nconst apiService = {\n  getTrendingMovies,\n  getMovieInfo,\n  searchMovies,\n  getMovieCast,\n  getMovieReviews,\n};\n\nexport default apiService;\n"],"names":["movieId","useParams","useState","movieInfo","setMovieInfo","location","useLocation","backLinkHref","useRef","state","from","useEffect","fetchMovieInfo","apiService","data","console","error","Container","BackLink","to","current","MovieInfoContainer","Poster","src","poster_path","alt","title","MovieInfo","Title","Overview","overview","ReleaseDate","release_date","Popularity","popularity","Genres","genres","map","genre","name","join","Nav","NavLink","Suspense","fallback","styled","Link","API_KEY","TRENDING_API_URL","MOVIE_INFO_API_URL","SEARCH_MOVIES_API_URL","getTrendingMovies","axios","params","api_key","response","results","Error","getMovieInfo","searchMovies","keyword","query","getMovieCast","cast","getMovieReviews"],"sourceRoot":""}